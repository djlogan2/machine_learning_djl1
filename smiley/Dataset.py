__author__ = 'david'

import numpy as np
from common import ImageDataset as da

class Dataset(da.ImageDataset):
    def __init__(self, include_bias, zero_center, training_mean=None, rgb=True, record_count=10000):
        self._include_bias = include_bias
        self._rgb = rgb
        imagedata = [
            255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
            255,255,255,255,255,255,227,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
            255,255,255,255,255,255,138,88,84,145,117,117,117,163,197,173,183,138,110,110,183,255,255,255,255,255,255,255,255,255,255,255,
            255,255,255,255,255,227,71,38,15,12,28,38,45,19,28,111,116,145,183,131,67,98,183,255,255,255,255,255,255,255,255,255,
            255,255,255,255,255,71,56,88,78,227,163,98,98,98,71,43,53,53,42,40,28,43,39,28,94,255,255,255,255,255,255,255,
            255,255,255,255,131,29,123,227,255,255,255,255,255,255,255,255,227,227,227,182,182,182,144,104,28,51,183,255,255,255,255,255,
            255,255,255,163,16,94,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,202,63,24,138,255,255,255,255,
            255,255,163,10,48,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,163,38,163,255,255,255,
            255,255,62,48,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,145,12,94,255,255,
            255,255,27,63,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,129,23,255,255,
            255,117,22,183,255,255,255,255,79,41,131,255,255,255,255,255,255,255,255,255,54,183,255,255,255,255,255,255,227,11,255,255,
            255,70,71,183,255,255,255,255,145,7,51,255,255,255,255,255,255,255,255,42,32,98,255,255,255,255,255,255,255,18,163,255,
            227,67,88,183,255,255,255,255,180,21,131,255,255,255,255,255,255,255,255,71,27,60,255,255,255,255,255,255,255,39,104,255,
            163,88,99,183,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,227,227,227,255,255,255,255,255,255,255,51,84,255,
            131,117,75,227,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,117,31,255,
            131,117,60,255,255,255,255,255,255,255,255,255,255,255,227,41,202,255,255,255,255,255,255,255,255,255,255,255,255,117,39,227,
            71,93,75,255,255,255,255,255,255,255,255,255,255,255,227,18,202,255,255,255,255,255,255,255,255,255,255,255,255,104,21,227,
            110,138,70,183,255,255,255,255,255,255,255,255,255,255,71,43,255,255,255,255,255,255,255,255,255,255,255,255,255,123,28,227,
            110,131,57,255,255,145,55,241,255,255,255,255,255,255,162,227,255,255,255,255,255,255,255,255,255,255,255,255,255,180,22,227,
            110,183,34,255,255,88,2,65,183,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,145,29,227,
            110,183,34,255,255,255,27,2,27,110,183,255,255,255,255,255,255,255,255,255,255,255,255,138,202,138,227,255,255,104,38,255,
            183,163,32,227,255,255,227,42,9,21,75,138,255,255,255,255,255,255,255,255,255,255,183,6,29,131,183,255,255,29,129,255,
            183,163,25,255,255,255,255,227,75,19,27,29,45,227,255,255,255,255,255,255,255,202,8,6,67,183,255,255,145,23,255,255,
            255,98,71,71,227,255,255,255,255,103,23,36,17,7,27,94,227,255,255,180,17,2,10,83,99,183,255,255,36,51,255,255,
            255,117,63,99,183,255,255,255,255,255,162,50,16,7,10,8,6,10,2,2,3,45,163,138,227,255,255,227,17,163,255,255,
            255,255,99,63,70,255,255,255,255,255,255,255,227,94,47,40,10,13,12,182,163,138,183,255,255,255,255,29,48,183,255,255,
            255,255,183,67,67,183,255,255,255,255,255,255,255,255,255,131,183,138,110,110,183,227,255,255,255,255,183,19,99,255,255,255,
            255,255,183,131,51,87,163,183,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,202,38,63,227,255,255,255,
            255,255,255,255,57,19,31,41,70,117,183,255,255,255,255,255,255,255,255,255,255,255,183,183,180,24,88,255,255,255,255,255,
            255,255,255,255,255,227,162,131,42,38,12,8,23,45,88,99,99,99,99,71,88,57,54,24,29,36,227,255,255,255,255,255,
            255,255,255,255,255,255,255,255,255,227,116,53,36,51,38,50,50,50,38,21,38,56,87,183,182,255,255,255,255,255,255,255,
            255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,182,182,182,227,255,255,255,255,255,255,255,255,255,255,255,255,255
        ]
        imagedata[:] = [255-x for x in imagedata] # Reverse all of the pixels
        if rgb:
            imagedata_r_only = imagedata + ([0] * (len(imagedata) * 2))
            imagedata_g_only = ([0] * len(imagedata)) + imagedata + ([0] * len(imagedata))
            imagedata_b_only = ([0] * (len(imagedata) * 2)) + imagedata
            imagedata = imagedata_r_only + imagedata_g_only + imagedata_b_only
            c = int(record_count / 3)
            imagedata = imagedata * c
            imagedata = np.array(imagedata,dtype=np.uint8).reshape(c * 3, 3, 32, 32) #.transpose(0,2,3,1)
            self._label_data = np.array([0,1,2] * c)
        else:
            imagedata = np.array(imagedata * record_count, dtype=np.uint8).reshape(record_count, 32, 32)
            self._label_data = np.array([0]*record_count)
        self._raw_image_data = imagedata
        da.ImageDataset.__init__(self, len(self._label_data), include_bias, zero_center, training_mean=training_mean)

    @property
    def rgb(self):
        return self._rgb

    @property
    def raw_image_data(self):
        return self._raw_image_data

    @property
    def label_data(self):
        return self._label_data
